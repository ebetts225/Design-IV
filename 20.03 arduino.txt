//#include <WiFiNINA.h>
#include <afstandssensor.h>

//har ssid[] = "LAPTOP-ETF87F9D 0946";
//char pass[] = "0i971L1;";

//WiFiClient client;
//IPAddress server(192,168,1,9);

double kp = -31;
double ki = 0;
double kd = -4.5;

const int LEYE = 10;
const int REYE = 9;

const int LWPWM = 16;
const int LWLOW = 7;
const int LWHIGH = 3;

const int RWLOW = 6;
const int RWHIGH = 5;
const int RWPWM = 17;

const int trig = 21;
const int echo = 20;

int time;
int distance;
int tot_time;
int n_speed = 0;
int speed_modified;

unsigned long currentTime, previousTime = 0;
double elapsedTime;
double error;
double lastError;
double actualdistance;
double cumError, rateError;

AfstandsSensor afstandssensor(trig, echo);

const double desired_distance = 15 ;
const double setdistance = (desired_distance - (desired_distance/2)); 

int C = 'A'; 
char message = 'o'; 

void setup() {  

  Serial.begin(9600);

  //WiFi.begin(ssid, pass);
  // client.connect(server,5000);
  //IPAddress ip = WiFi.localIP();
  Serial.print("IP Address:");
  //Serial.println(ip);
  
  pinMode( LEYE, INPUT );
  pinMode( REYE, INPUT );
  
  pinMode( LWPWM, OUTPUT);
  pinMode( LWLOW, OUTPUT);
  pinMode( LWHIGH, OUTPUT);

  pinMode( RWLOW, OUTPUT);
  pinMode( RWHIGH, OUTPUT);
  pinMode( RWPWM, OUTPUT);  

  pinMode(trig, OUTPUT);
  pinMode(echo, INPUT);

  
}

void rightwheel(int speed, int high, int low);
void leftwheel(int speed, int high, int low);
double computePID(double actdis);

void loop() {
distance = afstandssensor.afstandCM();
 
  //client.write(".");
  //Serial.println(".");

 /* char c = client.read();
 if( c == 'A' || c == 'B'){
   //Serial.write(c);
   // Serial.println(".");
    C = c;
    Serial.write(C);
 }

 if(C == 'B'){
   analogWrite(LWPWM, 0);
   analogWrite(RWPWM, 0);
 }
*/
 if(C == 'A'){
  distance = afstandssensor.afstandCM();
  speed_modified = computePID(distance);
  delay(0.1);
  
  n_speed = speed_modified;

  if(n_speed < 30 ){
    n_speed = 0;
  }
if(n_speed > 255 ){
  n_speed =  255;
} 
  {
    message = '.';    
   if(digitalRead( LEYE ) == HIGH && digitalRead( REYE ) == HIGH ){
     //forward
     rightwheel(n_speed, 1, 0);
     leftwheel(n_speed, 1, 0);
     //Serial.print("f");
   }

   if (digitalRead( LEYE ) == LOW && digitalRead( REYE ) == LOW){
     // stop
     rightwheel(0, 0, 0);
     leftwheel(0, 0, 0);
     //Serial.print("x");
    }

   /*if (digitalRead( LEYE ) == HIGH && digitalRead( REYE ) == HIGH){
     // reverse
     rightwheel(255, 0, 1);
     lightwheel(255, 0, 1);
     Serial.print("b");
   }*/ 

   if (digitalRead( LEYE ) == HIGH && digitalRead( REYE ) == LOW){
     //right
     rightwheel(64, 1, 0);
     leftwheel(255, 1, 0);
     //Serial.print("r");
    }

   if (digitalRead( LEYE ) == LOW && digitalRead( REYE ) == HIGH){
     //left 
     rightwheel(255, 1, 0);
     leftwheel(64, 1, 0);
     //Serial.println("l");
    }
  }
  }
}

void leftwheel(int speed, int high, int low){
  analogWrite(LWPWM, speed);
  digitalWrite(LWLOW, low);
  digitalWrite(LWHIGH, high);
}

void rightwheel(int speed, int high, int low){
  analogWrite(RWPWM, speed);
  digitalWrite(RWLOW, low);
  digitalWrite(RWHIGH, high);
}

double computePID(double actdis){     
        currentTime = millis();                //get current time
        elapsedTime = (double)(currentTime - previousTime);        //compute time elapsed from previous computation
       // Serial.println(elapsedTime);
        error =  setdistance - actdis;                   // determine error
        cumError += error * elapsedTime;                // compute integral
        rateError = (error - lastError)/elapsedTime;   // compute derivative

        int new_speed = kp*error + ki*cumError + kd*rateError;                //PID output               

        lastError = error;                                //remember current error
        previousTime = currentTime;                        //remember current time

        return new_speed;                                        //have function return the PID output
}

